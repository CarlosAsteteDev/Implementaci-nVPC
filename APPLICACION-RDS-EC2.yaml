AWSTemplateFormatVersion: '2010-09-09'
Resources:
#creando mi VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.10.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MiVPC"
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.0.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: "PublicSubnet1"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.2.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: "PublicSubnet2"
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.1.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.10.3.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MiInternetGateway"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "RouteTablePublic"
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "RouteTablePrivate"
  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  PrivateRouteToInternetViaNat:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublic
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublic
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref RouteTablePrivate
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref RouteTablePrivate
#creando mis instancias
  EC2WEB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0557a15b87f6559cf" # Ubuntu 20.04 LTS
      InstanceType: "t3.micro"
      KeyName: "clave-web"
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PrivateSubnet1   
          GroupSet: [ !Ref MySecurityWebGroup ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install -y apache2
          echo "Hello World" > /var/www/html/index.html 
          # Instalar el cliente MySQL
          yum install -y mysql         
          # Configurar la conexión al RDS MySQL
          export DB_HOST=${MyDBInstance.Endpoint.Address}
          export DB_PORT=3306
          export DB_NAME=mydatabase
          export DB_USER=admin
          export DB_PASSWORD=mypassword          
          # Ejecutar una consulta de prueba
          mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e "SELECT * FROM mytable"
      Tags:
        - Key: Name
          Value: "EC2WEB" 
  MySecurityWebGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic with bastion"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: "MySecurityWebGroup"  
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t3.micro"
      ImageId: "ami-0557a15b87f6559cf"
      KeyName: "clave-bastion"
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnet2
          AssociatePublicIpAddress: true
          GroupSet:
            - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: "bastion-host" 
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to bastion host
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "BastionSecurityGroup" 
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "my-load-balancer"
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: "my-load-balancer"
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "my-target-group"
      Port: 80
      Protocol: "HTTP"
      Targets:
        - Id: !Ref EC2WEB
          Port: 80
      TargetType: "instance"
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for Application Load Balancer'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" 
      Tags:
        - Key: Name
          Value: "ALBSecurityGroup"     
#mi base de datos
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "mydatabase"
      Engine: "MySQL"
      EngineVersion: "8.0.28"
      DBInstanceClass: "db.t3.micro"
      MasterUsername: "admin"
      MasterUserPassword: "mypassword"
      AllocatedStorage: "20"
      StorageType: "gp2"
      BackupRetentionPeriod: 7
      MultiAZ: true
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription:  for the DB subnet group
      DBSubnetGroupName: "mydbsubnetgroup"
      SubnetIds:
        - !Ref PrivateSubnet1 
        - !Ref PublicSubnet2
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref MySecurityWebGroup
      Tags:
        - Key: Name
          Value: "DatabaseSG"   
Outputs:
  VpcId:
    Value: !Ref VPC
    Description: "ID de la VPC creada"
  PublicSubnetIds:
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Description: "IDs de las subredes públicas creadas"
  PrivateSubnetIds:
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    Description: "IDs de las subredes privadas creadas"
  NatGatewayId:
    Value: !Ref NatGateway
    Description: "ID del Nat Gateway creado"
  SubnetsGroupDB:
    Description: "Las subredes usadas en mi MyDBSubnetGroup"
    Value: !Sub "http://${LoadBalancer.DNSName}/"
